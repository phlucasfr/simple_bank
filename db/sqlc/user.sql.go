// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    full_name,
    cpf_cnpj,
    email,
    password
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, full_name, cpf_cnpj, email, password, is_merchant, created_at, last_updated
`

type CreateUserParams struct {
	FullName string `json:"full_name"`
	CpfCnpj  string `json:"cpf_cnpj"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.CpfCnpj,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CpfCnpj,
		&i.Email,
		&i.Password,
		&i.IsMerchant,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, cpf_cnpj, email, password, is_merchant, created_at, last_updated FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CpfCnpj,
		&i.Email,
		&i.Password,
		&i.IsMerchant,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, cpf_cnpj, email, password, is_merchant, created_at, last_updated FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.CpfCnpj,
			&i.Email,
			&i.Password,
			&i.IsMerchant,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET email = $2, last_updated = now()
WHERE id = $1
RETURNING id, full_name, cpf_cnpj, email, password, is_merchant, created_at, last_updated
`

type UpdateUserEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CpfCnpj,
		&i.Email,
		&i.Password,
		&i.IsMerchant,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const updateUserIsMerchant = `-- name: UpdateUserIsMerchant :one
UPDATE users
SET is_merchant = CASE WHEN is_merchant = true THEN false ELSE true END, last_updated = now()
WHERE id = $1
RETURNING id, full_name, cpf_cnpj, email, password, is_merchant, created_at, last_updated
`

func (q *Queries) UpdateUserIsMerchant(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserIsMerchant, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CpfCnpj,
		&i.Email,
		&i.Password,
		&i.IsMerchant,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $2, last_updated = now()
WHERE id = $1
RETURNING id, full_name, cpf_cnpj, email, password, is_merchant, created_at, last_updated
`

type UpdateUserPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CpfCnpj,
		&i.Email,
		&i.Password,
		&i.IsMerchant,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}
